/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.caparelli.testmanager.resource;

import io.swagger.annotations.*;
import org.caparelli.testmanager.request.Order;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-23T23:28:27.788+02:00")

@Api(value = "order", description = "the order API")
public interface OrderApi {

    @ApiOperation(value = "Add a new order to the laboratory", nickname = "createOrder", notes = "", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createOrder(@ApiParam(value = "Order object that needs to be created" ,required=true )  @Valid @RequestBody Order body);


    @ApiOperation(value = "Deletes an order", nickname = "deleteOrder", notes = "", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@ApiParam(value = "Order id to delete",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Finds Orders by status", nickname = "findOrdersByStatus", notes = "Multiple status values can be provided with comma separated strings", response = Order.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Order.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/order/findByStatus",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Order>> findOrdersByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "pending, processed") @Valid @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Find order by ID", nickname = "getOrderById", notes = "Returns a single order", response = Order.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> getOrderById(@ApiParam(value = "ID of order to return",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Update an existing order", nickname = "updateOrder", notes = "", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateOrder(@ApiParam(value = "Order object that needs to be updated" ,required=true )  @Valid @RequestBody Order body);

}

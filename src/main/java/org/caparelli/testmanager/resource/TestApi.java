/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.caparelli.testmanager.resource;

import io.swagger.annotations.*;
import org.caparelli.testmanager.request.Operation;
import org.caparelli.testmanager.request.Test;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-23T23:28:27.788+02:00")

@Api(value = "test", description = "the test API")
public interface TestApi {

    @ApiOperation(value = "Add a new operation to an existing test", nickname = "addTestOperation", notes = "", tags={ "test", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Test not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/test/{testId}/operation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> addTestOperation(@ApiParam(value = "ID of test to return",required=true) @PathVariable("testId") Long testId,@ApiParam(value = "Operation object to be added inside the test" ,required=true )  @Valid @RequestBody Operation body);


    @ApiOperation(value = "Create a new test", nickname = "createTest", notes = "", tags={ "test", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/test",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createTest(@ApiParam(value = "Test object that needs to be created" ,required=true )  @Valid @RequestBody Test body);


    @ApiOperation(value = "Deletes an test", nickname = "deleteTest", notes = "", tags={ "test", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Test not found") })
    @RequestMapping(value = "/test/{testId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTest(@ApiParam(value = "Test id to delete",required=true) @PathVariable("testId") Long testId);


    @ApiOperation(value = "Finds Tests by Type", nickname = "findTestsByType", notes = "Multiple type values can be provided with comma separated strings", response = Test.class, responseContainer = "List", tags={ "test", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Test.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid type value") })
    @RequestMapping(value = "/test/findByType",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Test>> findTestsByType(@NotNull @ApiParam(value = "Type values that need to be considered for filter", required = true, allowableValues = "BIOCHEMISTRY, MICROBIOLOGY, HEMATOLOGY") @Valid @RequestParam(value = "type", required = true) List<String> type);


    @ApiOperation(value = "Find test by ID", nickname = "getTestById", notes = "Returns a single test", response = Test.class, tags={ "test", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Test.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Test not found") })
    @RequestMapping(value = "/test/{testId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Test> getTestById(@ApiParam(value = "ID of test to return",required=true) @PathVariable("testId") Long testId);


    @ApiOperation(value = "Update an existing test", nickname = "updateTest", notes = "", tags={ "test", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Test not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/test",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateTest(@ApiParam(value = "Test object that needs to be updated" ,required=true )  @Valid @RequestBody Test body);

}
